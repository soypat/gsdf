# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Requires paying for GPU access.
  # build-mac:
  #   name: MacOS
  #   runs-on: macos-latest-xlarge
  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Setup GPU drivers
  #     run: brew install mesa

  #   - name: Set up Go
  #     uses: actions/setup-go@v3
  #     with:
  #       go-version: 1.22

  #   - name: Build
  #     run: go build -v ./...

  #   - name: Test
  #     run: go test -v ./...

  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # ubuntu-latest runner has no GPU.
    - name: Env disable Cgo 
      run: echo "CGO_ENABLED=0" >> $GITHUB_ENV

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.22

    - name: Build
      run: go build -v ./...

    - name: govulncheck
      uses: golang/govulncheck-action@v1
      with:
        go-version-input: 1.22
        go-package: ./...

    - name: Test and Codecov
      shell: bash
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        # Replace `linux` below with the appropriate OS
        # Options are `alpine`, `linux`, `macos`, `windows`
        # You will need to setup the environment variables below in github
        # and the project in codecov.io
        go test -v -coverprofile=coverage.txt -covermode=atomic ./...
        curl -Os https://cli.codecov.io/latest/linux/codecov
        chmod +x codecov
        CODECOV_TOKEN=$CODECOV_TOKEN ./codecov
        ./codecov --verbose upload-process --fail-on-error -t ${{ secrets.CODECOV_TOKEN }} -n 'service'-${{ github.run_id }} -F service -f coverage-service.xml
