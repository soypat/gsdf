// The MIT License
// Copyright Â© 2023 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Distance to a vesica segment with 3 square roots, and to
// a vertival vesica segment with 2 square roots.
//
// 2D version here: https://www.shadertoy.com/view/cs2yzG
//
// List of other 3D SDFs:
//    https://www.shadertoy.com/playlist/43cXRl
// and 
//     https://iquilezles.org/articles/distfunctions


// https://iquilezles.org/articles/normalsSDF
vec3 calcNormal( in vec3 pos )
{
    vec2 e = vec2(1.0,-1.0)*0.5773;
    const float eps = 0.0005;
    return normalize( e.xyy*sdf( pos + e.xyy*eps ) + 
					  e.yyx*sdf( pos + e.yyx*eps ) + 
					  e.yxy*sdf( pos + e.yxy*eps ) + 
					  e.xxx*sdf( pos + e.xxx*eps ) );
}

// Antialiasing.
#define AA 3
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // Mouse input for camera control
    const float PI = 3.14159265359;
    vec2 mouse = iMouse.xy / iResolution.xy;

    // Set default mouse position if not available
    if (iMouse.xy == vec2(0.0))
    {
        mouse = vec2(0.5, 0.5); // Center position
    }

    // Calculate camera angles based on mouse position
    float yaw = (mouse.x - 0.5) * 2.0 * PI;     // Yaw angle
    float pitch = (mouse.y - 0.5) * PI;         // Pitch angle
    pitch = clamp(pitch, -PI/2.0 + 0.01, PI/2.0 - 0.01); // Prevent gimbal lock

    // Camera setup
    float camDist = 3.0; // Distance from the target
    vec3 ta = vec3(0.0, 0.0, 0.0); // Camera target at the origin

    // Calculate camera position based on angles
    vec3 dir;
    dir.x = cos(pitch) * sin(yaw);
    dir.y = sin(pitch);
    dir.z = cos(pitch) * cos(yaw);

    vec3 ro = ta - dir * camDist; // Camera position

    // Camera matrix
    vec3 ww = normalize(ta - ro);                     // Forward vector
    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0))); // Right vector
    vec3 vv = cross(uu, ww);                          // Up vector

    vec3 tot = vec3(0.0);

    #if AA > 1
    for (int m = 0; m < AA; m++)
    for (int n = 0; n < AA; n++)
    {
        // Pixel coordinates
        vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;
        vec2 p = (2.0 * (fragCoord + o) - iResolution.xy) / iResolution.y;
    #else
        vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;
    #endif

        // Create view ray
        vec3 rd = normalize(p.x * uu + p.y * vv + 1.5 * ww);

        // Ray marching
        const float tmax = 3.0;
        float t = 0.0;
        for (int i = 0; i < 256; i++)
        {
            vec3 pos = ro + t * rd;
            float h = sdf(pos);
            if (h < 0.0001 || t > tmax) break;
            t += h;
        }

        // Shading/lighting
        vec3 col = vec3(0.0);
        if (t < tmax)
        {
            vec3 pos = ro + t * rd;
            vec3 nor = calcNormal(pos);
            float dif = clamp(dot(nor, vec3(0.57703)), 0.0, 1.0);
            float amb = 0.5 + 0.5 * dot(nor, vec3(0.0, 1.0, 0.0));
            col = vec3(0.2, 0.3, 0.4) * amb + vec3(0.8, 0.7, 0.5) * dif;
        }

        // Gamma correction
        col = sqrt(col);
        tot += col;
    #if AA > 1
    }
    tot /= float(AA * AA);
    #endif

    fragColor = vec4(tot, 1.0);
}